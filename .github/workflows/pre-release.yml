name: pre-release

# Refer to https://help.github.com/en/articles/workflow-syntax-for-github-actions for documentation on Actions.
on:
  release:
    types:
      - prereleased

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Validate release tag
        run: |
          # We only want to run on tags looking like refs/tags/v1200.
          echo "Checking tag: $GITHUB_REF"
          [[ "${GITHUB_REF:10:1}" == "v" ]] || exit 1

      - name: Setup Node.js 14.12.0
        uses: actions/setup-node@v1
        with:
          node-version: "14.12.0"

      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-

      - name: Upgrade NPM to 6.14.8
        run: |
          npm i -g npm@6.14.8

      - name: "Install dependencies"
        run: |
          npm ci

      # Disabled: Artifacts are not available across workflows.
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: bootstrap-${{ github.sha }}
      #     path: ./target/cdk/release

      - name: Install musl-tools
        run: sudo apt-get install musl-tools
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2020-08-28
          override: true
          target: x86_64-unknown-linux-musl
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ hashFiles('**/Cargo.lock') }}-release

      - run: |
          cargo build --release --target x86_64-unknown-linux-musl --features vendored
          # Move artifact into expected location.
          cp ./target/x86_64-unknown-linux-musl/release/sls_rust_minimal ./target/cdk/release/bootstrap

      - name: Deploy
        if: env.AWS_ACCESS_KEY_ID && env.AWS_SECRET_ACCESS_KEY
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.RELEASE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.RELEASE_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.RELEASE_AWS_SECRET_ACCESS_KEY }}
        run: |
          AWS_REGION=$AWS_DEFAULT_REGION npm run cdk:deploy
